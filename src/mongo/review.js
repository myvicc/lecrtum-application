import mongoose from 'mongoose';

const reviewSchema = new mongoose.Schema({
    date: {
        type: Date,
        default: Date.now(),
    },
    text: String,
    studentId: mongoose.SchemaTypes.ObjectId,
    teacherId: mongoose.SchemaTypes.ObjectId,
});

reviewSchema.methods.toResponse = function toResponse() {
    return {
        id: this._id,
        date: this.date.toISOString(),
        text: this.text,
        studentId: this.studentId,
        teacherId: this.teacherId
    }
};

/**
 * @type {(Model<InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}, HydratedDocument<FlatRecord<{date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}>, {}>>>, ObtainSchemaGeneric<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}, HydratedDocument<FlatRecord<{date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}>, {}>>, "TQueryHelpers">, ObtainSchemaGeneric<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}, HydratedDocument<FlatRecord<{date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}>, {}>>, "TInstanceMethods">, ObtainSchemaGeneric<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}, HydratedDocument<FlatRecord<{date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}>, {}>>, "TVirtuals">, HydratedDocument<InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}, HydratedDocument<FlatRecord<{date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}>, {}>>>, ObtainSchemaGeneric<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}, HydratedDocument<FlatRecord<{date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}>, {}>>, "TVirtuals"> & ObtainSchemaGeneric<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}, HydratedDocument<FlatRecord<{date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}>, {}>>, "TInstanceMethods">, ObtainSchemaGeneric<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}, HydratedDocument<FlatRecord<{date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}>, {}>>, "TQueryHelpers">>, module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}, HydratedDocument<FlatRecord<{date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}>, {}>>> & {}) | (Model<InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}, HydratedDocument<FlatRecord<{date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}>, {}>>>, ObtainSchemaGeneric<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}, HydratedDocument<FlatRecord<{date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}>, {}>>, "TQueryHelpers">, ObtainSchemaGeneric<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}, HydratedDocument<FlatRecord<{date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}>, {}>>, "TInstanceMethods">, ObtainSchemaGeneric<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}, HydratedDocument<FlatRecord<{date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}>, {}>>, "TVirtuals">, HydratedDocument<InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}, HydratedDocument<FlatRecord<{date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}>, {}>>>, ObtainSchemaGeneric<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}, HydratedDocument<FlatRecord<{date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}>, {}>>, "TVirtuals"> & ObtainSchemaGeneric<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}, HydratedDocument<FlatRecord<{date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}>, {}>>, "TInstanceMethods">, ObtainSchemaGeneric<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}, HydratedDocument<FlatRecord<{date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}>, {}>>, "TQueryHelpers">>, module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}, HydratedDocument<FlatRecord<{date: {default: number, type: DateConstructor}, studentId: ObjectId, teacherId: ObjectId, text: StringConstructor}>, {}>>> & {[p: string]: (this:Model<any, any, any, any>, ...args: any[]) => any}, function toResponse(): {id:String}
 */
export const Review = mongoose.model('Review', reviewSchema);
